##### BEGIN METATRON AUTOCONFIG
# Do not remove the above line. The metatron CLI uses it to update this file.
# Set git proxy configuration (must be the first directive in this file)
[include]
    path = /Users/skalidindi/.gitconfig-proxy
# Do not remove the below line. The metatron CLI uses it to update this file.
##### END METATRON AUTOCONFIG

[includeIf "gitdir:~/oss/"]

  path = ~/oss.gitconfig

[includeIf "gitdir:~/work/"]

  path = ~/work.gitconfig

##### END METATRON AUTOCONFIG
[alias]

  # Add
  a = add --all
  ai = add -i

  # List aliases.
	aliases = config --get-regexp alias

  # Blame ignore white space and detech lines moved and all commits
  bla = blame -w -C -C -C

  # Branch
  b = branch
  ba = branch -a
  bd = branch -d
	bdd = branch -D
  br = branch -r
  bc = rev-parse --abbrev-ref HEAD
	bu = !git rev-parse --abbrev-ref --symbolic-full-name "@{u}"
	bs = !git-branch-status

  # Clone
  cl = clone
	cld = clone --depth 1
	clg = !sh -c 'git clone https://github.com/$1 $(basename $1)' -
	clgp = !sh -c 'git clone git@github.com:$1 $(basename $1)' -
	clgu = !sh -c 'git clone git@github.com:$(git config --get user.username)/$1 $1' -

  # Commit
  c = commit
  ca = commit -a
  cam = commit -am
	cm = commit -m
  cem = commit --allow-empty -m
	cd = commit --amend
	cad = commit -a --amend
	ced = commit --allow-empty --amend

  # Checkout
  co = checkout

  # List contributors with number of commits.
	contributors = shortlog --summary --numbered

  # Remove branches that have already been merged with main.
	# a.k.a. ‘delete merged’
	dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

  # Make Empty commit
  empty = "git commit --allow-empty"

	# View abbreviated SHA, description, and history graph of the latest 20 commits.
	l = log --pretty=oneline -n 20 --graph --abbrev-commit

  # Pull
  pl = pull
	pb = pull --rebase

  # Push
  ps = push
  psf = push -f --force-with-lease
  psu = push -u
	pst = push --tags
  pso = push origin
	psao = push --all origin
	psfo = push -f origin
	psuo = push -u origin

  # Rebase
  rb = rebase
	rba = rebase --abort
	rbc = rebase --continue
	rbi = rebase --interactive
	rbs = rebase --skip

  # List remotes
	remotes = remote --verbose

  # Reset
  re = reset
	rh = reset HEAD
	reh = reset --hard
	rem = reset --mixed
	res = reset --soft
	rehh = reset --hard HEAD
	remh = reset --mixed HEAD
	resh = reset --soft HEAD
	rehom = reset --hard origin/master

  # Stash
  sta = stash --all
  stc = stash clear
  std = stash drop
  stl = stash list
  stp = stash pop
  sts = stash save
  stsk = stash save -k
  stw = stash show

  # Switch
  s = switch

  # Show verbose output about tags, branches or remotes
	tags = tag -l

  #wdiff
  wdiff = diff --word-diff

	# Show the user email for the current repository.
	whoami = config user.email

[apply]

  # Detect whitespace errors when applying a patch
  whitespace = fix

[branch]

  # Show most recently changed branches first.
	sort = -committerdate

[column]

  ui = auto

[core]

  fsmonitor = true
  editor = 'nvim'
  pager = delta

[color]

  # Use colors in Git commands that are capable of colored output when
  # outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
  ui = true
  status = auto

[color "status"]

	added = "green normal"
	changed = "yellow normal"

[delta]

  light = false      # set to true if you're in a terminal w/ a light background color (e.g. the default macOS terminal)
  line-numbers = true
  navigate = true    # use n and N to move between diff sections
  side-by-side = true

[diff]

	colorMoved = default
	# Detect copies as well as renames.
	renames = copies

[fetch]
    prune = true
    writeCommitGraph = true

[help]

  # Automatically correct and execute mistyped commands
  autocorrect = 1

[init]

	defaultBranch = main

[interactive]

  diffFilter = delta --color-only

[merge]

  conflictstyle = diff3
	# Include summaries of merged commits in newly created merge commit messages
	log = true

[push]

	# https://git-scm.com/docs/git-config#git-config-pushdefault
	default = simple
	# Make `git push` push relevant annotated tags when pushing branches out.
	followTags = true
	autoSetupRemote = true

[rebase]

  autosquash = true

[rerere]

	enabled = 1
	autoupdate = 1
